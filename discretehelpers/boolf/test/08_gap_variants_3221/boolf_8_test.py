import pytest

from discretehelpers.a import key_tuples

from discretehelpers.boolf.examples.e08_gap_variants_3221 import *


standard_bundles = [[0, 1, 2], [3, 4], [5, 6], [7]]
standard_bundle_overlap_counts = {
    (0, 1, 2): {
        3: [],
        4: [(0, 1), (0, 2), (1, 2)]
    },
    (3, 4): {
        3: [],
        4: [(3, 4)]
    },
    (5, 6): {
        3: [],
        4: [(5, 6)]
    },
    (7,): {
        3: [],
        4: []
    }
}


# based on kusaru

def test_kusaru():
    assert kusaru.fullspots == {0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 24, 32, 64, 96, 128}
    assert kusaru.splits == [
        ({1, 3, 5, 7}, {0, 32, 2, 64, 4, 96, 6, 128, 8, 16, 24}),  # a 0
        ({2, 3, 6, 7}, {0, 1, 32, 64, 4, 5, 96, 128, 8, 16, 24}),  # b 1
        ({4, 5, 6, 7}, {0, 1, 2, 3, 32, 64, 96, 128, 8, 16, 24}),  # c 2
        ({8, 24}, {0, 1, 2, 3, 4, 5, 6, 7, 32, 64, 96, 128, 16}),  # d 3
        ({16, 24}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 32, 64, 96, 128}),  # e 4
        ({32, 96}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 64, 128, 16, 24}),  # f 5
        ({64, 96}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 32, 128, 16, 24}),  # g 6
        ({128}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 32, 64, 96, 16, 24})   # h 7
    ]


def test_sasunu():
    assert sasunu.fullspots == {1, 2, 3, 4, 5, 6, 7, 8, 16, 24, 32, 64, 96, 128}
    assert sasunu.splits == [
        ({1, 3, 5, 7}, {32, 64, 2, 96, 4, 128, 6, 8, 16, 24}),  # a 0
        ({2, 3, 6, 7}, {32, 1, 64, 96, 4, 5, 128, 8, 16, 24}),  # b 1
        ({4, 5, 6, 7}, {32, 1, 2, 3, 64, 96, 128, 8, 16, 24}),  # c 2
        ({8, 24}, {32, 1, 2, 3, 4, 5, 6, 7, 64, 96, 128, 16}),  # d 3
        ({16, 24}, {32, 1, 2, 3, 4, 5, 6, 7, 8, 64, 96, 128}),  # e 4
        ({32, 96}, {64, 1, 2, 3, 4, 5, 6, 7, 8, 128, 16, 24}),  # f 5
        ({64, 96}, {32, 1, 2, 3, 4, 5, 6, 7, 8, 128, 16, 24}),  # g 6
        ({128}, {32, 1, 2, 3, 4, 5, 6, 7, 8, 64, 96, 16, 24})   # h 7
    ]


def test_banatu():
    assert banatu.fullspots == {0, 1, 2, 4, 7, 8, 16, 24, 32, 64, 96, 128}
    assert banatu.splits == [
        ({1, 7}, {0, 32, 2, 64, 4, 96, 128, 8, 16, 24}),  # a 0
        ({2, 7}, {0, 1, 32, 64, 4, 96, 128, 8, 16, 24}),  # b 1
        ({4, 7}, {0, 1, 2, 32, 64, 96, 128, 8, 16, 24}),  # c 2
        ({8, 24}, {0, 1, 2, 32, 4, 64, 96, 7, 128, 16}),  # d 3
        ({16, 24}, {0, 1, 2, 32, 4, 64, 96, 7, 8, 128}),  # e 4
        ({32, 96}, {0, 1, 2, 64, 4, 128, 7, 8, 16, 24}),  # f 5
        ({64, 96}, {0, 1, 2, 32, 4, 128, 7, 8, 16, 24}),  # g 6
        ({128}, {0, 1, 2, 32, 4, 64, 96, 7, 8, 16, 24})   # h 7
    ]


# based on lekate

def test_lekate():
    assert lekate.fullspots == {0, 1, 2, 3, 4, 5, 6, 7, 38, 70, 102, 130, 138, 146, 154}
    assert lekate.splits == [
        ({1, 3, 5, 7}, {0, 2, 130, 4, 38, 6, 70, 102, 138, 146, 154}),  # a 0
        ({2, 3, 130, 38, 6, 7, 70, 102, 138, 146, 154}, {0, 1, 4, 5}),  # b 1
        ({4, 5, 38, 6, 7, 70, 102}, {0, 1, 2, 3, 130, 138, 146, 154}),  # c 2
        ({138, 154}, {0, 1, 2, 3, 4, 5, 6, 7, 38, 70, 102, 130, 146}),  # d 3
        ({146, 154}, {0, 1, 2, 3, 4, 5, 6, 7, 38, 70, 102, 130, 138}),  # e 4
        ({102, 38}, {0, 1, 2, 3, 4, 5, 6, 7, 70, 130, 138, 146, 154}),  # f 5
        ({102, 70}, {0, 1, 2, 3, 4, 5, 6, 7, 38, 130, 138, 146, 154}),  # g 6
        ({130, 146, 154, 138}, {0, 1, 2, 3, 4, 5, 6, 7, 38, 70, 102})   # h 7
    ]


def test_vepane():
    assert vepane.fullspots == {0, 1, 2, 3, 4, 5, 38, 70, 102, 138, 146, 154}
    assert vepane.splits == [
        ({1, 3, 5}, {0, 2, 4, 70, 38, 102, 138, 146, 154}),  # a 0
        ({2, 3, 102, 70, 38, 138, 146, 154}, {0, 1, 4, 5}),  # b 1
        ({4, 5, 70, 102, 38}, {0, 1, 2, 3, 146, 154, 138}),  # c 2
        ({138, 154}, {0, 1, 2, 3, 4, 5, 38, 70, 102, 146}),  # d 3
        ({146, 154}, {0, 1, 2, 3, 4, 5, 38, 70, 102, 138}),  # e 4
        ({102, 38}, {0, 1, 2, 3, 4, 5, 70, 138, 146, 154}),  # f 5
        ({102, 70}, {0, 1, 2, 3, 4, 5, 38, 138, 146, 154}),  # g 6
        ({138, 154, 146}, {0, 1, 2, 3, 4, 5, 38, 70, 102})   # h 7
    ]


def test_nutite():
    assert nutite.fullspots == {0, 1, 3, 4, 5, 6, 7, 38, 70, 102, 138, 146, 154}
    assert nutite.splits == [
        ({1, 3, 5, 7}, {0, 4, 38, 6, 70, 102, 138, 146, 154}),  # a 0
        ({3, 38, 70, 6, 7, 102, 138, 146, 154}, {0, 1, 4, 5}),  # b 1
        ({4, 5, 38, 6, 7, 70, 102}, {0, 1, 146, 3, 154, 138}),  # c 2
        ({138, 154}, {0, 1, 3, 4, 5, 6, 7, 38, 70, 102, 146}),  # d 3
        ({146, 154}, {0, 1, 3, 4, 5, 6, 7, 38, 70, 102, 138}),  # e 4
        ({102, 38}, {0, 1, 3, 4, 5, 6, 7, 70, 138, 146, 154}),  # f 5
        ({102, 70}, {0, 1, 3, 4, 5, 6, 7, 38, 138, 146, 154}),  # g 6
        ({138, 154, 146}, {0, 1, 3, 4, 5, 6, 7, 38, 70, 102})   # h 7
    ]


# based on lobeva

def test_lobeva():
    assert lobeva.fullspots == {0, 128, 160, 161, 162, 163, 164, 165, 166, 167, 192, 200, 208, 216, 224}
    assert lobeva.splits == [
        ({161, 163, 165, 167}, {0, 128, 162, 160, 164, 192, 166, 224, 200, 208, 216}),  # a 0
        ({162, 163, 166, 167}, {0, 161, 128, 160, 164, 165, 192, 224, 200, 208, 216}),  # b 1
        ({164, 165, 166, 167}, {0, 161, 162, 128, 160, 163, 192, 224, 200, 208, 216}),  # c 2
        ({200, 216}, {0, 161, 162, 128, 160, 163, 164, 165, 166, 167, 192, 224, 208}),  # d 3
        ({208, 216}, {0, 161, 162, 128, 160, 163, 164, 165, 166, 167, 192, 200, 224}),  # e 4
        ({160, 161, 162, 163, 164, 165, 166, 167, 224}, {0, 128, 192, 208, 200, 216}),  # f 5
        ({192, 224, 208, 200, 216}, {0, 161, 162, 128, 160, 163, 164, 165, 166, 167}),  # g 6
        ({128, 161, 162, 163, 160, 164, 165, 166, 167, 192, 200, 224, 208, 216}, {0})   # h 7
    ]
    assert lobeva.splits_onesided == [False, False, False, False, False, False, False, False]


def test_tigola():
    assert tigola.fullspots == {0, 128, 161, 162, 163, 164, 165, 166, 200, 208, 216, 224}
    assert tigola.splits == [
        ({161, 163, 165}, {0, 128, 162, 224, 164, 166, 200, 208, 216}),  # a 0
        ({162, 163, 166}, {0, 161, 128, 224, 164, 165, 200, 208, 216}),  # b 1
        ({164, 165, 166}, {0, 161, 162, 163, 128, 224, 200, 208, 216}),  # c 2
        ({200, 216}, {0, 161, 162, 163, 128, 164, 165, 166, 224, 208}),  # d 3
        ({208, 216}, {0, 161, 162, 163, 128, 164, 165, 166, 200, 224}),  # e 4
        ({224, 161, 162, 163, 164, 165, 166}, {0, 128, 208, 200, 216}),  # f 5
        ({200, 224, 216, 208}, {0, 161, 162, 163, 128, 164, 165, 166}),  # g 6
        ({128, 161, 162, 163, 164, 165, 166, 224, 200, 208, 216}, {0})   # h 7
    ]
    assert tigola.splits_onesided == [False, False, False, False, False, False, False, False]


# redrawn

def test_karato():
    assert karato.fullspots == {0, 161, 128, 163, 160, 192, 167, 200, 216}
    assert karato.splits == [
        ({161, 163, 167}, {0, 128, 160, 192, 200, 216}),  # a 0
        ({163, 167}, {0, 161, 128, 160, 192, 200, 216}),  # b 1
        ({167}, {0, 161, 128, 163, 160, 192, 200, 216}),  # c 2
        ({200, 216}, {0, 161, 128, 163, 160, 192, 167}),  # d 3
        ({216}, {0, 161, 128, 163, 160, 192, 167, 200}),  # e 4
        ({160, 161, 163, 167}, {0, 128, 192, 200, 216}),  # f 5
        ({192, 216, 200}, {0, 161, 128, 163, 160, 167}),  # g 6
        ({128, 161, 160, 163, 192, 167, 200, 216}, {0})   # h 7
    ]
    assert karato.splits_overlap_counts == {(0, 1): 3, (0, 2): 3, (0, 3): 3, (0, 4): 3, (0, 5): 3, (0, 6): 3, (0, 7): 3, (1, 2): 3, (1, 3): 3, (1, 4): 3, (1, 5): 3, (1, 6): 3, (1, 7): 3, (2, 3): 3, (2, 4): 3, (2, 5): 3, (2, 6): 3, (2, 7): 3, (3, 4): 3, (3, 5): 3, (3, 6): 3, (3, 7): 3, (4, 5): 3, (4, 6): 3, (4, 7): 3, (5, 6): 3, (5, 7): 3, (6, 7): 3}
    assert karato.split_pairs_with_3_overlaps == [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7)]
    assert karato.bundles == [[0], [1], [2], [3], [4], [5], [6], [7]]
    assert karato.bundle_overlap_counts == {(0,): {3: [], 4: []}, (1,): {3: [], 4: []}, (2,): {3: [], 4: []}, (3,): {3: [], 4: []}, (4,): {3: [], 4: []}, (5,): {3: [], 4: []}, (6,): {3: [], 4: []}, (7,): {3: [], 4: []}}


def test_karafa():
    assert karafa.fullspots == {0, 160, 161, 162, 167, 192, 208, 216}
    assert karafa.splits == [
        ({161, 167}, {0, 160, 162, 192, 208, 216}),  # a 0
        ({162, 167}, {0, 161, 160, 192, 208, 216}),  # b 1
        ({167}, {0, 161, 162, 160, 192, 208, 216}),  # c 2
        ({216}, {0, 161, 162, 160, 192, 208, 167}),  # d 3
        ({208, 216}, {0, 161, 162, 160, 192, 167}),  # e 4
        ({160, 161, 162, 167}, {0, 208, 216, 192}),  # f 5
        ({192, 216, 208}, {0, 161, 162, 160, 167}),  # g 6
        ({160, 161, 162, 192, 208, 167, 216}, {0})   # h 7
    ]
    assert karafa.splits_overlap_counts == {(0, 1): 4, (0, 2): 3, (0, 3): 3, (0, 4): 3, (0, 5): 3, (0, 6): 3, (0, 7): 3, (1, 2): 3, (1, 3): 3, (1, 4): 3, (1, 5): 3, (1, 6): 3, (1, 7): 3, (2, 3): 3, (2, 4): 3, (2, 5): 3, (2, 6): 3, (2, 7): 3, (3, 4): 3, (3, 5): 3, (3, 6): 3, (3, 7): 3, (4, 5): 3, (4, 6): 3, (4, 7): 3, (5, 6): 3, (5, 7): 3, (6, 7): 3}
    assert karafa.split_pairs_with_3_overlaps == [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7)]
    assert karafa.bundles == [[0, 1], [2], [3], [4], [5], [6], [7]]
    assert karafa.bundle_overlap_counts == {
        (0, 1): {3: [], 4: [(0, 1)]},
        (2,): {3: [], 4: []},
        (3,): {3: [], 4: []},
        (4,): {3: [], 4: []},
        (5,): {3: [], 4: []},
        (6,): {3: [], 4: []},
        (7,): {3: [], 4: []}
    }


def test_todeda():
    assert todeda.fullspots == {160, 162, 163, 165, 167, 192, 200, 216, 224}
    assert todeda.splits == [
        ({163, 165, 167}, {160, 192, 162, 224, 200, 216}),      # a 0
        ({162, 163, 167}, {160, 192, 224, 165, 200, 216}),      # b 1
        ({165, 167}, {160, 192, 162, 163, 224, 200, 216}),      # c 2
        ({200, 216}, {160, 192, 162, 163, 224, 165, 167}),      # d 3
        ({216}, {160, 192, 162, 163, 224, 165, 167, 200}),      # e 4
        ({160, 224, 162, 163, 165, 167}, {192, 216, 200}),      # f 5
        ({192, 224, 216, 200}, {160, 162, 163, 165, 167}),      # g 6
        ({160, 192, 162, 163, 224, 165, 167, 200, 216}, set())  # h 7
    ]
    assert todeda.splits_overlap_counts == {(0, 1): 4, (0, 2): 3, (0, 3): 3, (0, 4): 3, (0, 5): 3, (0, 6): 3, (0, 7): 2, (1, 2): 4, (1, 3): 3, (1, 4): 3, (1, 5): 3, (1, 6): 3, (1, 7): 2, (2, 3): 3, (2, 4): 3, (2, 5): 3, (2, 6): 3, (2, 7): 2, (3, 4): 3, (3, 5): 3, (3, 6): 3, (3, 7): 2, (4, 5): 3, (4, 6): 3, (4, 7): 2, (5, 6): 3, (5, 7): 2, (6, 7): 2}
    assert todeda.splits_onesided == [False, False, False, False, False, False, False, True]
    assert todeda.split_pairs_with_3_overlaps == [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6)]
    assert todeda.bundles == [[0, 1, 2], [3], [4], [5], [6], [7]]
    assert todeda.bundle_overlap_counts == {
        (0, 1, 2): {3: [(0, 2)], 4: [(0, 1), (1, 2)]},
        (3,): {3: [], 4: []},
        (4,): {3: [], 4: []},
        (5,): {3: [], 4: []},
        (6,): {3: [], 4: []},
        (7,): {3: [], 4: []}
    }


def test_todeda_blightless():
    assert todeda_blightless == Boolf(fullspots={32, 34, 35, 37, 39, 64, 72, 88, 96}, arity=7)
    assert todeda_blightless.splits == [
        ({35, 37, 39}, {32, 64, 34, 96, 72, 88}),  # a 0
        ({34, 35, 39}, {32, 64, 96, 37, 72, 88}),  # b 1
        ({37, 39}, {32, 64, 34, 35, 96, 72, 88}),  # c 2
        ({72, 88}, {32, 64, 34, 35, 96, 37, 39}),  # d 3
        ({88}, {32, 64, 34, 35, 96, 37, 39, 72}),  # e 4
        ({32, 96, 34, 35, 37, 39}, {64, 88, 72}),  # f 5
        ({64, 88, 72, 96}, {32, 34, 35, 37, 39})   # g 6
    ]
    assert todeda_blightless.splits_overlap_counts == {(0, 1): 4, (0, 2): 3, (0, 3): 3, (0, 4): 3, (0, 5): 3, (0, 6): 3, (1, 2): 4, (1, 3): 3, (1, 4): 3, (1, 5): 3, (1, 6): 3, (2, 3): 3, (2, 4): 3, (2, 5): 3, (2, 6): 3, (3, 4): 3, (3, 5): 3, (3, 6): 3, (4, 5): 3, (4, 6): 3, (5, 6): 3}
    assert todeda_blightless.split_pairs_with_3_overlaps == todeda.split_pairs_with_3_overlaps
    assert todeda_blightless.bundles == [[0, 1, 2], [3], [4], [5], [6]]  # a b c | d | e | f | g
    assert todeda_blightless.bundle_overlap_counts == {
        (0, 1, 2): {3: [(0, 2)], 4: [(0, 1), (1, 2)]},
        (3,): {3: [], 4: []},
        (4,): {3: [], 4: []},
        (5,): {3: [], 4: []},
        (6,): {3: [], 4: []}
    }


def test_lapava():
    assert lapava.fullspots == {128, 161, 162, 163, 164, 165, 166, 167, 200, 208, 216, 224}
    assert lapava.splits == [
        ({161, 163, 165, 167}, {128, 224, 162, 164, 166, 200, 208, 216}),      # a 0
        ({162, 163, 166, 167}, {128, 161, 224, 164, 165, 200, 208, 216}),      # b 1
        ({164, 165, 166, 167}, {128, 161, 162, 163, 224, 200, 208, 216}),      # c 2
        ({200, 216}, {128, 161, 162, 163, 164, 165, 166, 167, 224, 208}),      # d 3
        ({208, 216}, {128, 161, 162, 163, 164, 165, 166, 167, 200, 224}),      # e 4
        ({224, 161, 162, 163, 164, 165, 166, 167}, {128, 208, 216, 200}),      # f 5
        ({200, 224, 216, 208}, {128, 161, 162, 163, 164, 165, 166, 167}),      # g 6
        ({128, 161, 162, 163, 164, 165, 166, 167, 200, 224, 208, 216}, set())  # h 7
    ]
    assert lapava.splits_overlap_counts == {(0, 1): 4, (0, 2): 4, (0, 3): 3, (0, 4): 3, (0, 5): 3, (0, 6): 3, (0, 7): 2, (1, 2): 4, (1, 3): 3, (1, 4): 3, (1, 5): 3, (1, 6): 3, (1, 7): 2, (2, 3): 3, (2, 4): 3, (2, 5): 3, (2, 6): 3, (2, 7): 2, (3, 4): 4, (3, 5): 3, (3, 6): 3, (3, 7): 2, (4, 5): 3, (4, 6): 3, (4, 7): 2, (5, 6): 4, (5, 7): 2, (6, 7): 2}
    assert lapava.splits_onesided == [False, False, False, False, False, False, False, True]
    assert lapava.split_pairs_with_3_overlaps == [(0, 3), (0, 4), (0, 5), (0, 6), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 5), (3, 6), (4, 5), (4, 6)]
    assert lapava.bundles == standard_bundles
    assert lapava.bundle_overlap_counts == standard_bundle_overlap_counts


def test_lapava_blightless():
    assert lapava_blightless == Boolf(fullspots={0, 33, 34, 35, 36, 37, 38, 39, 72, 96, 80, 88}, arity=7)
    assert lapava_blightless.splits == [
        ({33, 35, 37, 39}, {0, 96, 34, 36, 38, 72, 80, 88}),  # a 0
        ({34, 35, 38, 39}, {0, 33, 96, 36, 37, 72, 80, 88}),  # b 1
        ({36, 37, 38, 39}, {0, 33, 34, 35, 96, 72, 80, 88}),  # c 2
        ({72, 88}, {0, 33, 34, 35, 36, 37, 38, 39, 96, 80}),  # d 3
        ({80, 88}, {0, 33, 34, 35, 36, 37, 38, 39, 72, 96}),  # e 4
        ({96, 33, 34, 35, 36, 37, 38, 39}, {0, 80, 72, 88}),  # f 5
        ({72, 88, 80, 96}, {0, 33, 34, 35, 36, 37, 38, 39})   # g 6
    ]
    assert lapava_blightless.splits_overlap_counts == {(0, 1): 4, (0, 2): 4, (0, 3): 3, (0, 4): 3, (0, 5): 3, (0, 6): 3, (1, 2): 4, (1, 3): 3, (1, 4): 3, (1, 5): 3, (1, 6): 3, (2, 3): 3, (2, 4): 3, (2, 5): 3, (2, 6): 3, (3, 4): 4, (3, 5): 3, (3, 6): 3, (4, 5): 3, (4, 6): 3, (5, 6): 4}
    assert lapava_blightless.split_pairs_with_3_overlaps == lapava.split_pairs_with_3_overlaps
    assert lapava_blightless.bundles == [[0, 1, 2], [3, 4], [5, 6]]
    assert lapava_blightless.bundle_overlap_counts == {
        (0, 1, 2): {3: [], 4: [(0, 1), (0, 2), (1, 2)]},
        (3, 4): {3: [], 4: [(3, 4)]},
        (5, 6): {3: [], 4: [(5, 6)]}
    }


# compare each one with its gapless base
boolfs_a, boolfs_b, boolfs_c = [kusaru, sasunu, banatu], [lekate, vepane, nutite], [lobeva, tigola]
lists_of_boolfs = [boolfs_a, boolfs_b, boolfs_c]
key_pairs = key_tuples(lists_of_boolfs)


@pytest.mark.parametrize('pair', key_pairs)
def test_many_shapes(pair):
    a, b = pair
    base_boolf = lists_of_boolfs[a][0]
    boolf = lists_of_boolfs[a][b]
    assert boolf.gapless_boolf == base_boolf  # e.g. boolf_a2.gapless_boolf == boolf_a0


# test each one alone
@pytest.mark.parametrize('boolf', boolfs_a + boolfs_b + boolfs_c)
def test_many_bundles(boolf):
    assert boolf.splits_overlap_counts == {(0, 1): 4, (0, 2): 4, (0, 3): 3, (0, 4): 3, (0, 5): 3, (0, 6): 3, (0, 7): 3, (1, 2): 4, (1, 3): 3, (1, 4): 3, (1, 5): 3, (1, 6): 3, (1, 7): 3, (2, 3): 3, (2, 4): 3, (2, 5): 3, (2, 6): 3, (2, 7): 3, (3, 4): 4, (3, 5): 3, (3, 6): 3, (3, 7): 3, (4, 5): 3, (4, 6): 3, (4, 7): 3, (5, 6): 4, (5, 7): 3, (6, 7): 3}
    assert boolf.splits_onesided == [False, False, False, False, False, False, False, False]
    assert boolf.split_pairs_with_3_overlaps == [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (5, 7), (6, 7)]
    assert boolf.bundles == standard_bundles
    assert boolf.bundle_overlap_counts == standard_bundle_overlap_counts
